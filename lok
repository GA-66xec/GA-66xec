local UILibrary = {}

function UILibrary.CreateWindow(title, width, height)
    local ScreenGui = Instance.new("ScreenGui")
    local MainFrame = Instance.new("Frame")
    local TitleBar = Instance.new("Frame")
    local TitleLabel = Instance.new("TextLabel")
    local CloseButton = Instance.new("TextButton")
    local HideButton = Instance.new("TextButton")
    local ContentFrame = Instance.new("Frame")
    local Dragging, DragStart, StartPos = false, nil, nil

    -- Create the main ScreenGui
    ScreenGui.Parent = game.CoreGui
    local screenWidth = game:GetService("Workspace").CurrentCamera.ViewportSize.X
    local screenHeight = game:GetService("Workspace").CurrentCamera.ViewportSize.Y

    -- Adjust window size based on screen size
    local adjustedWidth = math.min(width, screenWidth * 0.8)
    local adjustedHeight = math.min(height, screenHeight * 0.8)

    -- Main Window Frame
    MainFrame.Name = "MainFrame"
    MainFrame.Parent = ScreenGui
    MainFrame.BackgroundColor3 = Color3.fromRGB(20, 20, 20) -- Jet black background
    MainFrame.BackgroundTransparency = 0.2
    MainFrame.Size = UDim2.new(0, adjustedWidth, 0, adjustedHeight)
    MainFrame.Position = UDim2.new(0.5, -adjustedWidth / 2, 0.5, -adjustedHeight / 2)
    MainFrame.ClipsDescendants = true
    MainFrame.BorderSizePixel = 2
    MainFrame.BorderColor3 = Color3.fromRGB(50, 50, 50) -- Frame border

    -- Title Bar (Draggable part)
    TitleBar.Name = "TitleBar"
    TitleBar.Parent = MainFrame
    TitleBar.BackgroundColor3 = Color3.fromRGB(30, 30, 30) -- Jet black
    TitleBar.Size = UDim2.new(1, 0, 0, 30)
    TitleBar.BorderSizePixel = 2
    TitleBar.BorderColor3 = Color3.fromRGB(50, 50, 50) -- Frame border

    -- Title Label
    TitleLabel.Name = "TitleLabel"
    TitleLabel.Parent = TitleBar
    TitleLabel.BackgroundTransparency = 1
    TitleLabel.Size = UDim2.new(1, -60, 1, 0)
    TitleLabel.Font = Enum.Font.SourceSans
    TitleLabel.Text = title
    TitleLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
    TitleLabel.TextSize = 18
    TitleLabel.TextXAlignment = Enum.TextXAlignment.Left
    TitleLabel.Position = UDim2.new(0, 10, 0, 0)

    -- Hide Button (top-right of the screen)
    HideButton.Name = "HideButton"
    HideButton.Parent = ScreenGui
    HideButton.Size = UDim2.new(0, 60, 0, 30)
    HideButton.Position = UDim2.new(1, -70, 0, 10)
    HideButton.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
    HideButton.Font = Enum.Font.SourceSans
    HideButton.Text = "Hide"
    HideButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    HideButton.TextSize = 14
    HideButton.BorderSizePixel = 2
    HideButton.BorderColor3 = Color3.fromRGB(50, 50, 50)

    -- Content Frame for holding UI elements (buttons, toggles, etc.)
    ContentFrame.Name = "ContentFrame"
    ContentFrame.Parent = MainFrame
    ContentFrame.BackgroundTransparency = 1
    ContentFrame.Size = UDim2.new(1, 0, 1, -30)
    ContentFrame.Position = UDim2.new(0, 0, 0, 30)

    -- Make the window draggable
    TitleBar.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            Dragging = true
            DragStart = input.Position
            StartPos = MainFrame.Position
        end
    end)

    TitleBar.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            Dragging = false
        end
    end)

    game:GetService("UserInputService").InputChanged:Connect(function(input)
        if Dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
            local Delta = input.Position - DragStart
            MainFrame.Position = UDim2.new(StartPos.X.Scale, StartPos.X.Offset + Delta.X, StartPos.Y.Scale, StartPos.Y.Offset + Delta.Y)
        end
    end)

    -- Hide/Show Button functionality
    local isVisible = true
    HideButton.MouseButton1Click:Connect(function()
        if isVisible then
            MainFrame.Visible = false
            HideButton.Text = "Show"
        else
            MainFrame.Visible = true
            HideButton.Text = "Hide"
        end
        isVisible = not isVisible
    end)

    return {Frame = MainFrame, Content = ContentFrame, HideButton = HideButton}
end

-- Add Label
function UILibrary.AddLabel(parent, text)
    local Label = Instance.new("TextLabel")
    Label.Parent = parent
    Label.Size = UDim2.new(1, 0, 0, 30)
    Label.BackgroundColor3 = Color3.fromRGB(20, 20, 20) -- Jet black background
    Label.BackgroundTransparency = 0.2
    Label.Font = Enum.Font.SourceSans
    Label.Text = text
    Label.TextColor3 = Color3.fromRGB(255, 255, 255)
    Label.TextSize = 16
    Label.TextXAlignment = Enum.TextXAlignment.Left
    Label.BorderSizePixel = 2
    Label.BorderColor3 = Color3.fromRGB(50, 50, 50) -- Frame border
end

-- Add Button
function UILibrary.AddButton(parent, text, callback)
    local Button = Instance.new("TextButton")
    Button.Parent = parent
    Button.Size = UDim2.new(1, 0, 0, 30)
    Button.BackgroundColor3 = Color3.fromRGB(20, 20, 20) -- Jet black background
    Button.BackgroundTransparency = 0.2
    Button.Font = Enum.Font.SourceSans
    Button.Text = text
    Button.TextColor3 = Color3.fromRGB(255, 255, 255)
    Button.TextSize = 16
    Button.BorderSizePixel = 2
    Button.BorderColor3 = Color3.fromRGB(50, 50, 50) -- Frame border
    Button.MouseButton1Click:Connect(callback)
end

-- Add Toggle
function UILibrary.AddToggle(parent, text, callback)
    local ToggleFrame = Instance.new("Frame")
    local ToggleButton = Instance.new("TextButton")
    local Label = Instance.new("TextLabel")
    local State = false

    ToggleFrame.Parent = parent
    ToggleFrame.Size = UDim2.new(1, 0, 0, 30)
    ToggleFrame.BackgroundTransparency = 1

    Label.Parent = ToggleFrame
    Label.Size = UDim2.new(0.7, 0, 1, 0)
    Label.Position = UDim2.new(0, 10, 0, 0)
    Label.Font = Enum.Font.SourceSans
    Label.Text = text
    Label.TextColor3 = Color3.fromRGB(255, 255, 255)
    Label.TextSize = 16
    Label.BackgroundTransparency = 1

    ToggleButton.Parent = ToggleFrame
    ToggleButton.Size = UDim2.new(0.3, 0, 1, 0)
    ToggleButton.Position = UDim2.new(0.7, 0, 0, 0)
    ToggleButton.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
    ToggleButton.Text = "OFF"
    ToggleButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    ToggleButton.TextSize = 16
    ToggleButton.BorderSizePixel = 2
    ToggleButton.BorderColor3 = Color3.fromRGB(50, 50, 50)

    ToggleButton.MouseButton1Click:Connect(function()
        State = not State
        ToggleButton.Text = State and "ON" or "OFF"
        ToggleButton.BackgroundColor3 = State and Color3.fromRGB(50, 200, 50) or Color3.fromRGB(50, 50, 50)
        callback(State)
    end)
end

-- Add Dropdown
function UILibrary.AddDropdown(parent, text, options, callback)
local Dropdown = Instance.new("Frame")
    local Button = Instance.new("TextButton")
    local OptionFrame = Instance.new("Frame")
    local Layout = Instance.new("UIListLayout")

    Dropdown.Parent = parent
    Dropdown.Size = UDim2.new(1, 0, 0, 40)
    Dropdown.BackgroundColor3 = Color3.fromRGB(20, 20, 20)  -- Jet black background
    Dropdown.BackgroundTransparency = 0.2
    Dropdown.BorderSizePixel = 2
    Dropdown.BorderColor3 = Color3.fromRGB(50, 50, 50)  -- Border color

    Button.Parent = Dropdown
    Button.Size = UDim2.new(1, 0, 0, 30)
    Button.BackgroundColor3 = Color3.fromRGB(20, 20, 20)  -- Jet black
    Button.Font = Enum.Font.SourceSans
    Button.Text = text
    Button.TextColor3 = Color3.fromRGB(255, 255, 255)
    Button.TextSize = 16
    Button.BorderSizePixel = 0

    OptionFrame.Parent = Dropdown
    OptionFrame.Size = UDim2.new(1, 0, 0, 0)
    OptionFrame.Position = UDim2.new(0, 0, 0, 30)  -- Dropdown options appear below the button
    OptionFrame.BackgroundColor3 = Color3.fromRGB(20, 20, 20)  -- Jet black background
    OptionFrame.BackgroundTransparency = 0.2
    OptionFrame.Visible = false
    OptionFrame.BorderSizePixel = 2
    OptionFrame.BorderColor3 = Color3.fromRGB(50, 50, 50)  -- Border color

    Layout.Parent = OptionFrame
    Layout.SortOrder = Enum.SortOrder.LayoutOrder
    Layout.Padding = UDim(0, 5)

    for _, option in pairs(options) do
        local OptionButton = Instance.new("TextButton")
        OptionButton.Parent = OptionFrame
        OptionButton.Size = UDim2.new(1, 0, 0, 30)
        OptionButton.BackgroundColor3 = Color3.fromRGB(40, 40, 40)  -- Darker black
        OptionButton.Font = Enum.Font.SourceSans
        OptionButton.Text = option
        OptionButton.TextColor3 = Color3.fromRGB(255, 255, 255)
        OptionButton.TextSize = 16
        OptionButton.BorderSizePixel = 0

        OptionButton.MouseButton1Click:Connect(function()
            Button.Text = option
            OptionFrame.Visible = false
            callback(option)
        end)
    end

    Button.MouseButton1Click:Connect(function()
        OptionFrame.Visible = not OptionFrame.Visible
    end)

    -- Close the dropdown if clicked outside
    game:GetService("UserInputService").InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 and not Dropdown:GetAbsBounds():Contains(input.Position) then
            OptionFrame.Visible = false
        end
    end)

    return Dropdown
end

return UILibrary
